'use strict';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}

/* client/components/Menu.svelte generated by Svelte v3.20.1 */

const css = {
	code: ".Menu.svelte-s4ffrs{display:flex}a.svelte-s4ffrs{margin-right:1rem}",
	map: "{\"version\":3,\"file\":\"Menu.svelte\",\"sources\":[\"Menu.svelte\"],\"sourcesContent\":[\"<div class=\\\"Menu\\\">\\n\\t<a href=\\\"/\\\">Home</a>\\n\\t<a href=\\\"/fruits\\\">Fruits</a>\\n</div>\\n\\n<style>\\n\\t.Menu {\\n\\t\\tdisplay: flex;\\n\\t}\\n\\n\\ta {\\n\\t\\tmargin-right: 1rem;\\n\\t}\\n</style>\"],\"names\":[],\"mappings\":\"AAMC,KAAK,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACd,CAAC,AAED,CAAC,cAAC,CAAC,AACF,YAAY,CAAE,IAAI,AACnB,CAAC\"}"
};

const Menu = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	$$result.css.add(css);

	return `<div class="${"Menu svelte-s4ffrs"}"><a href="${"/"}" class="${"svelte-s4ffrs"}">Home</a>
	<a href="${"/fruits"}" class="${"svelte-s4ffrs"}">Fruits</a>
</div>`;
});

/* client/pages/Home.svelte generated by Svelte v3.20.1 */

const css$1 = {
	code: "h1.svelte-jx9bdn{margin:2rem 0}",
	map: "{\"version\":3,\"file\":\"Home.svelte\",\"sources\":[\"Home.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport {onMount} from 'svelte';\\n\\timport Menu from '../components/Menu.svelte';\\n\\texport let dateString;\\n\\n\\tonMount(() => {\\n\\t\\tsetInterval(() => {\\n\\t\\t\\tdateString = (new Date()).toString() + ' Client-side rendered!';\\n\\t\\t}, 1000);\\n\\t});\\n</script>\\n\\n<Menu/>\\n\\n<h1>Home</h1>\\n\\n<div>{dateString}</div>\\n\\n<style>\\n\\th1 {\\n\\t\\tmargin: 2rem 0;\\n\\t}\\n</style>\"],\"names\":[],\"mappings\":\"AAmBC,EAAE,cAAC,CAAC,AACH,MAAM,CAAE,IAAI,CAAC,CAAC,AACf,CAAC\"}"
};

const Home = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { dateString } = $$props;

	onMount(() => {
		setInterval(
			() => {
				dateString = new Date().toString() + " Client-side rendered!";
			},
			1000
		);
	});

	if ($$props.dateString === void 0 && $$bindings.dateString && dateString !== void 0) $$bindings.dateString(dateString);
	$$result.css.add(css$1);

	return `${validate_component(Menu, "Menu").$$render($$result, {}, {}, {})}

<h1 class="${"svelte-jx9bdn"}">Home</h1>

<div>${escape(dateString)}</div>`;
});

module.exports = Home;
